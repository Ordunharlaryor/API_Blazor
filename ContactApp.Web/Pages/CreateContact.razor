@attribute [Authorize]
@page "/CreateContact"
@inherits CreateContactBase

<EditForm Model="@Contact" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <h3>Edit Contact</h3>
    <hr />
    <ValidationSummary />
    <div class="form-group row">
        <label for="firstName" class="col-sm-2 col-form-label">
            First Name
        </label>
        <div class="col-sm-10">
            <InputText id="firstName" class="form-control" placeholder="First Name"
                       @bind-Value="Contact.FirstName" />
            <ValidationMessage For="@(() => Contact.FirstName)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="lastName" class="col-sm-2 col-form-label">
            Last Name
        </label>
        <div class="col-sm-10">
            <InputText id="lastName" class="form-control" placeholder="Last Name"
                       @bind-Value="Contact.LastName" />
            <ValidationMessage For="@(() => Contact.LastName)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="email" class="col-sm-2 col-form-label">
            Email
        </label>
        <div class="col-sm-10">
            <InputText id="firstName" class="form-control" placeholder="Email"
                       @bind-Value="Contact.Email" />
            <ValidationMessage For="@(() => Contact.Email)" />
        </div>
    </div>

    <div class="form-group row">
        <label for="Address" class="col-sm-2 col-form-label">
            Address
        </label>
        <div class="col-sm-10">
            <InputText id="Address" class="form-control" placeholder="Address"
                       @bind-Value="Contact.Address" />
        </div>
    </div>
    <div class="form-group row">
        <label for="Phonenumber" class="col-sm-2 col-form-label">
            Phone Number
        </label>
        <div class="col-sm-10">
            <InputText id="phonenumber" class="form-control" placeholder="Phone Number"
                       @bind-Value="Contact.Phonenumber" />
            <ValidationMessage For="(() => Contact.Phonenumber)" />
        </div>
    </div>
    <div class="form-group row" >
        <label for="Gender" class="col-sm-2 col-form-label">
            Gender
        </label>
        <div class="col-sm-10">
            <InputSelect @bind-Value="Contact.Gender" class="form-control">
                @foreach (var gender in Enum.GetValues(typeof(Gender)))
                {
                    <option value="@gender">@gender</option>
                }
            </InputSelect>
        </div>
    </div>
    <div class="form-group row">
        <label for="Occupation" class="col-sm-2 col-form-label">
            Occupation
        </label>
        <div class="col-sm-10">
            <InputText id="Occupation" class="form-control" placeholder="Occupation"
                       @bind-Value="Contact.Occupation" />
        </div>
    </div>
    <div class="form-group row">
        <label for="dateOfBirth" class="col-sm-2 col-form-label">
            Date Of Birth
        </label>
        <div class="col-sm-10">
            <InputDate @bind-Value="Contact.DateOfBirth" class="form-control" />
        </div>
    </div>
    <div class="form-group row">
        <label for="PhotoPath" class="col-sm-2 col-form-label">
            PhotoPath
        </label>
        <div class="col-sm-10">
            <InputText id="PhotoPath" class="form-control" placeholder="PhotPath"
                       @bind-Value="Contact.PhotoPath" />
        </div>
        @*<div class="form-group mt-2">
            <label class="form-label" for="image">Image</label>&nbsp; <span class="text-danger fw-bold">@uploadMessage</span>
            <InputFile id="image" OnChange="OnFileChange" class="form-control"></InputFile>
            <ValidationMessage For="@(()=> Contact.PhotoPath)"></ValidationMessage>
        </div>*@
        </div>
        
    <button class="btn btn-primary" type="submit">Submit</button>
</EditForm>

@code {
    public Contact NewContact = new Contact();
    private string uploadMessage;
    private string Message = string.Empty;
    private string CssClass = string.Empty;
    async Task HandleAddProduct()
    {
        Message = "";
        var response = await ContactService.CreateContact(NewContact);
        //Message = response!.Message;
        //CssClass = response!.CssClass;
    }


    async Task OnFileChange(InputFileChangeEventArgs e)
    {
        FileInfo fileInfo = new FileInfo(e.File.Name);
        if (fileInfo.Extension.ToLower().Contains(".jpg"))
        {
            uploadMessage = "";
            var format = "image/jpg";
            var resizeImage = await e.File.RequestImageFileAsync(format, 300, 300);
            var buffer = new byte[resizeImage.Size];
            await resizeImage.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
            NewContact.PhotoPath = imageData;

        }
        else { uploadMessage = "Invalid file selected (only JPG file)"; }
    }
}